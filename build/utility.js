// Generated by CoffeeScript 1.7.1

/* file: utility.coffee
    made: 5/31/2014
    note: various utility functions; they are placed in window.util
 */

(function() {
  var add_semicolon, clean_up, count_leading_parentheses, last, replace_all, strip_between, strip_outer_parentheses;

  strip_between = function(str, L, R) {

    /* Removes anything in str contained between an L and an R. */
    var i, j;
    i = str.indexOf(L);
    j = (str.substring(i + 1)).indexOf(R);
    if (i === -1 || j === -1) {
      return str;
    } else {
      return strip_between(str.substring(0, i) + str.substring(i + j + 2), L, R);
    }
  };

  strip_outer_parentheses = function(str) {

    /* Your classes "(asdf)" to "asdf" function. Works like a charm. */
    if (str.substring(0, 1) !== "(" || parse.find_end(str) !== (str.length - 1)) {
      return str;
    } else {
      return str.substring(1, str.length - 1);
    }
  };

  replace_all = function(str, from, to) {

    /* Replaces all instances of 'from' with 'to'. */
    while (str.indexOf(from) !== -1) {
      str = str.replace(from, to);
    }
    return str;
  };

  clean_up = function(str) {

    /* Removes outer parentheses, outer whitespace, and trims inner whitespace. */
    return (strip_outer_parentheses(str.trim())).trim();
  };

  count_leading_parentheses = function(str) {

    /* Counts the number of '(' that occur before a non-whitespace , non '('
        character.
     */
    var x, _ref, _ref1;
    _ref = [0, replace_all(str.trim(), " ", "")], x = _ref[0], str = _ref[1];
    while (str.substring(0, 1) === "(") {
      _ref1 = [x + 1, str.substring(1)], x = _ref1[0], str = _ref1[1];
    }
    return x;
  };

  last = function(L) {

    /* Returns the last element of a list. */
    return L[L.length - 1];
  };

  add_semicolon = function(str) {

    /* Adds a semicolon to the end of str. If the last character is a ;, will
        not add. If the last character is a \n, will place before it.
     */
    var _ref;
    while ((_ref = str[str.length - 1]) === ';' || _ref === '\n') {
      str = str.substring(0, str.length - 1);
    }
    return str + ';\n';
  };

  window.util = {
    strip_between: strip_between,
    strip_outer_parentheses: strip_outer_parentheses,
    replace_all: replace_all,
    clean_up: clean_up,
    count_leading_parentheses: count_leading_parentheses,
    last: last,
    add_semicolon: add_semicolon
  };

}).call(this);
