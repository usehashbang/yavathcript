// Generated by CoffeeScript 1.7.1
(function() {
  var arg_list, arith, call, compile, define, func_and_args, parse_blocks;

  parse_blocks = function(src) {

    /* Takes (a) b ... (c) and returns [(a), b, ..., (c)]. */
    var L, i;
    i = src.substring(0, 1) === "(" ? find_end(src) : src.indexOf(" ");
    if (i === -1) {
      src = util.strip_outer_whitespace(src);
      if (src === "") {
        return [];
      } else {
        return [util.strip_outer_whitespace(src)];
      }
    } else {
      L = [util.strip_outer_whitespace(src.substring(0, i + 1))];
      return L.concat(parse_blocks(util.strip_outer_whitespace(src.substring(i + 1))));
    }
  };

  arg_list = function(args) {

    /* Takes something like ['x_1', ..., 'x_n'] and gives "(x_1, ..., x_n)". */
    var innerargs, lastarg, text, x, _i, _len;
    lastarg = args[args.length - 1];
    innerargs = args.splice(0, args.length - 1);
    text = "(";
    for (_i = 0, _len = innerargs.length; _i < _len; _i++) {
      x = innerargs[_i];
      text = text + x + ", ";
    }
    return text + lastarg + ")";
  };

  func_and_args = function(args) {

    /* Takes something like ['f', 'x_1', ..., 'x_n'] and gives "f(x_1, ..., x_n)". */
    return args[0] + arg_list(args.splice(1, args.length - 1));
  };

  define = function(src) {

    /* Handles the case of a (define (f x_1 ... x_n) (stuffs)) */
    var blocks, params, suite;
    blocks = parse_blocks(src);
    params = parse_blocks(util.clean_up(blocks[0]));
    suite = blocks[1];
    if (params.length === 1) {
      return "var " + params[0] + " = " + compile(suite) + ";\n";
    } else {
      return func_and_args(params) + " {\n    return " + compile(suite) + ";\n}";
    }
  };

  call = function(src) {

    /* Handles the case of (f x_1 ... x_n). */
    return func_and_args(parse_blocks(util.clean_up(src)));
  };

  arith = function(op, args) {

    /* Handles the case of (* x_1 ... x_n), etc. */
    var arg, lastarg, text, _i, _len, _ref;
    args = parse_blocks(args);
    lastarg = args[args.length - 1];
    text = '(';
    _ref = args.splice(0, args.length - 1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      text = text + compile(arg) + ' ' + op + ' ';
    }
    return text + compile(lastarg) + ')';
  };

  compile = function(src) {

    /* The main compiling function. */
    var n;
    src = util.clean_up(src);
    n = src.indexOf(' ');
    if (n === -1) {
      return src;
    } else {
      switch (src.substring(0, n)) {
        case "define":
          return define(src.substring(n + 1));
        case "*":
        case "+":
        case "-":
          return arith(src.substring(0, 1), src.substring(2, src.length));
        default:
          return call(src);
      }
    }
  };

  window.compile = compile;

}).call(this);
